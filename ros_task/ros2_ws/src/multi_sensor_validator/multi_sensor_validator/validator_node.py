from multi_sensor_validator.i_publisher import IPublisher
from multi_sensor_validator.utility import Utility
from rclpy.node import Node
from std_msgs.msg import String,Int32

class ValidatorNode(Node,IPublisher):
    """Node that simulates an validator by publishing random range values."""
    
    def __init__(self):
        super().__init__('validator_node')
        self.get_logger().info('Validator Node has been started.')
        self.ultrasonic_reading = None
        self.infrared_reading = None
        self.ultrasonic_subscription = self.create_subscription(
            Int32, 'ultrasonic_range', self.ultrasonic_callback, Utility.queue_size
            )
        self.infrared_subscription = self.create_subscription(
                Int32, 'infrared_range', self.infrared_callback, Utility.queue_size
            )
        self._publisher = self.create_publisher(
            String, "validation_result",Utility.queue_size 
            )
        # Timer
        self._timer = self.create_timer(Utility.timer_period+0.5, self.publish_msg)
            
    def ultrasonic_callback(self, msg):
        # self.get_logger().info(f"Recieved: {msg.data} from ultrasonic")
        self.ultrasonic_reading = msg.data

    def infrared_callback(self, msg):
        # self.get_logger().info(f"Recieved: {msg.data} from infrared")
        self.infrared_reading = msg.data
         
    def validate_measurements(self):
        """Validate the data from both sensors."""
        if self.ultrasonic_reading is not None and self.infrared_reading is not None:
            return  abs(self.ultrasonic_reading - self.infrared_reading) <= 20
        return False
    
    def publish_msg(self):
        """Publish a message with data generated by the subclass."""
        validation_result = self.validate_measurements()
        msg = String()
        validation_msg = "Sensor readings consistent" if validation_result else "Sensor readings inconsistent"
        msg.data= f"Ultrasonic: {self.ultrasonic_reading} cm, Infrared: {self.infrared_reading} cm â†’ {validation_msg}"
        self._publisher.publish(msg)
        # self.get_logger().info(f"Publishing: {msg.data}")


def main(args=None):
    Utility.run_node(args=args,node_factory=lambda:ValidatorNode())


if __name__ == '__main__':
    main()
